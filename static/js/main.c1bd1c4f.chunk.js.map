{"version":3,"sources":["assets/faceMeshTemplate.png","experience/index.ts","components/Scene/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["_instance","camera","faceTrackerGroup","faceBufferGeometry","renderer","scene","targetElement","ZapparThree","Error","this","THREE","antialias","start","background","backgroundTexture","addEventListener","width","offsetWidth","window","innerWidth","height","offsetHeight","innerHeight","setSize","directionalLight","position","set","lookAt","ambeintLight","add","manager","faceTracker","load","faceMesh","faceTexture","faceTextureTemplate","flipY","faceMeshMesh","map","transparent","onVisible","bind","visible","onNotVisible","setPixelRatio","Math","min","devicePixelRatio","appendChild","domElement","getContext","updateFrame","updateFromFaceAnchorGroup","render","requestAnimationFrame","setRenderer","setFace","setLight","setResize","Scene","ref","useRef","useEffect","Experience","init","current","id","App","useState","granted","setGranted","className","onClick","then","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1bd1c4f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/faceMeshTemplate.6e15d49f.png\";","import * as ZapparThree from '@zappar/zappar-threejs'\nimport * as THREE from 'three'\n\nimport faceTextureTemplate from '../assets/faceMeshTemplate.png'\n\nclass Experience {\n  private camera!: ZapparThree.Camera\n  private faceTrackerGroup!: ZapparThree.FaceAnchorGroup\n  private faceBufferGeometry!: ZapparThree.FaceBufferGeometry\n\n  private renderer!: THREE.WebGLRenderer\n  private scene!: THREE.Scene\n\n  private targetElement!: HTMLDivElement | null\n\n  constructor() {\n    if (ZapparThree.browserIncompatible()) {\n      ZapparThree.browserIncompatibleUI()\n      throw new Error('Unsupported browser')\n    }\n\n    this.renderer = new THREE.WebGLRenderer({ antialias: true })\n    this.scene = new THREE.Scene()\n    this.camera = new ZapparThree.Camera()\n    this.camera.start(true)\n    this.scene.background = this.camera.backgroundTexture\n  }\n\n  private setResize() {\n    this.targetElement?.addEventListener('resize', () => {\n      const width = this.targetElement?.offsetWidth || window.innerWidth\n      const height = this.targetElement?.offsetHeight || window.innerHeight\n\n      this.renderer.setSize(width, height)\n    })\n  }\n\n  private setLight() {\n    const directionalLight = new THREE.DirectionalLight('white', 0.8)\n    directionalLight.position.set(0, 5, 0)\n    directionalLight.lookAt(0, 0, 0)\n\n    const ambeintLight = new THREE.AmbientLight('white', 0.4)\n\n    this.scene.add(directionalLight, ambeintLight)\n  }\n\n  private setFace() {\n    const manager = new ZapparThree.LoadingManager()\n\n    // Tracker\n    const faceTracker = new ZapparThree.FaceTrackerLoader(manager).load()\n    // Tracker group\n    this.faceTrackerGroup = new ZapparThree.FaceAnchorGroup(\n      this.camera,\n      faceTracker\n    )\n    this.scene.add(this.faceTrackerGroup)\n\n    // Face Mesh\n    const faceMesh = new ZapparThree.FaceMeshLoader(manager).load()\n    this.faceBufferGeometry = new ZapparThree.FaceBufferGeometry(faceMesh)\n\n    const textureLoader = new THREE.TextureLoader(manager)\n    const faceTexture = textureLoader.load(faceTextureTemplate)\n    faceTexture.flipY = true\n\n    // Construct a THREE Mesh object from our geometry and texture, and add it to our tracker group\n    const faceMeshMesh = new THREE.Mesh(\n      this.faceBufferGeometry,\n      new THREE.MeshStandardMaterial({\n        map: faceTexture,\n        transparent: true,\n      })\n    )\n\n    this.faceTrackerGroup.add(faceMeshMesh)\n\n    this.faceTrackerGroup.faceTracker.onVisible.bind(() => {\n      this.faceTrackerGroup.visible = true\n    })\n    this.faceTrackerGroup.faceTracker.onNotVisible.bind(() => {\n      this.faceTrackerGroup.visible = false\n    })\n  }\n\n  private setRenderer() {\n    this.renderer.setSize(window.innerWidth, window.innerHeight)\n    this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n    this.targetElement?.appendChild(this.renderer.domElement)\n\n    ZapparThree.glContextSet(this.renderer.getContext())\n  }\n\n  private render() {\n    this.camera.updateFrame(this.renderer)\n\n    this.faceBufferGeometry.updateFromFaceAnchorGroup(this.faceTrackerGroup)\n\n    this.renderer.render(this.scene, this.camera)\n\n    requestAnimationFrame(this.render.bind(this))\n  }\n\n  public init(targetElement: HTMLDivElement | null) {\n    if (!targetElement) throw new Error(\"Missing 'targetElement' property\")\n    this.targetElement = targetElement\n\n    this.setRenderer()\n    this.setFace()\n    this.setLight()\n    this.setResize()\n    this.render()\n  }\n}\n\nconst _instance = new Experience()\nexport default _instance\n","import { useRef, useEffect } from 'react'\n\nimport Experience from '../../experience'\n\nconst Scene = () => {\n  const ref = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    if (ref) Experience.init(ref.current)\n  }, [ref])\n\n  return <div id=\"experience\" ref={ref}></div>\n}\n\nexport default Scene\n","import { useState } from 'react'\nimport * as ZapparThree from '@zappar/zappar-threejs'\n\nimport Scene from './components/Scene'\n\nconst App = () => {\n  const [granted, setGranted] = useState(false)\n\n  const handleClick = () => {\n    ZapparThree.permissionRequest().then((granted) => {\n      if (granted) setGranted(true)\n      else ZapparThree.permissionDeniedUI()\n    })\n  }\n\n  if (granted) return <Scene />\n\n  return (\n    <div className=\"splash-screen\">\n      <button onClick={handleClick}>Allow Camera</button>\n    </div>\n  )\n}\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}