{"version":3,"sources":["config/styles/colors.ts","config/styles/index.ts","experience/camera.ts","experience/renderer.ts","assets/faceMeshTemplate.png","experience/Face/lights.ts","experience/Face/index.ts","experience/world.ts","experience/index.ts","components/Scene/styles.ts","components/Scene/index.tsx","components/Button/index.tsx","utils/zappar.ts","app/index.tsx","reportWebVitals.ts","index.tsx"],"names":["Color","fullStyling","styled","Camera","experience","instance","this","Experience","setInstance","ZapparThree","value","start","renderer","updateFrame","Renderer","removeDomElement","canvas","document","querySelector","getElementById","removeChild","THREE","antialias","setSize","config","width","height","setPixelRatio","pixelRatio","render","scene","camera","Lights","directionalLight","ambientLight","setLights","position","set","lookAt","Face","lights","faceMaterial","faceBufferGeometry","faceTrackerGroup","faceMeshMesh","setFace","setVisibility","add","faceTracker","onVisible","bind","visible","onNotVisible","manager","load","faceMesh","faceTexture","faceTextureTemplate","flipY","map","transparent","updateFromFaceAnchorGroup","dispose","remove","World","face","update","destroy","options","isRunning","targetElement","world","Error","setScene","setCamera","setConfig","setRenderer","setWorld","setResize","console","log","warn","background","backgroundTexture","Math","min","max","window","devicePixelRatio","boundings","getBoundingClientRect","innerWidth","innerHeight","addEventListener","resize","appendChild","domElement","getContext","requestAnimationFrame","stop","Container","div","Scene","targetRef","useRef","useEffect","current","id","ref","Button","button","props","primary","ZapparPermissionRquest","callback","a","App","useState","granted","setGranted","className","onClick","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.5b16c1dc.chunk.js","sourcesContent":["export const Color = {\n  PRIMARY: '#61dafb',\n  SECONDARY: '#20232a',\n}\n","import * as styled from 'styled-components'\nimport { Color } from './colors'\n\nconst fullStyling = styled.css`\n  width: 100%;\n  height: 100%;\n`\n\nexport default styled.createGlobalStyle`\n  html,\n  body,\n  #root {\n    margin: 0;\n    padding: 0;\n\n    ${fullStyling};\n\n    font-family: Arial, Helvetica, Arial, sans-serif;\n  }\n\n  .app {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n\n    ${fullStyling};\n  }\n\n  .link {\n    font-size: bold;\n    color: ${Color.SECONDARY};\n\n    :hover {\n      color: #000;\n    }\n  }\n`\n","import * as ZapparThree from '@zappar/zappar-threejs'\n\nimport Experience from '.'\n\nexport default class Camera {\n  private experience: Experience\n\n  public instance!: ZapparThree.Camera\n\n  constructor() {\n    this.experience = new Experience()\n\n    this.setInstance()\n  }\n\n  private setInstance() {\n    this.instance = new ZapparThree.Camera()\n  }\n\n  public start(value = true) {\n    this.instance.start(value)\n  }\n\n  public update() {\n    if (this.experience.renderer) {\n      this.instance.updateFrame(this.experience.renderer.instance)\n    }\n  }\n}\n","import * as THREE from 'three'\n\nimport Experience from '.'\n\nexport default class Renderer {\n  private experience: Experience\n  public instance!: THREE.WebGLRenderer\n\n  constructor() {\n    this.experience = new Experience()\n\n    this.removeDomElement()\n    this.setInstance()\n  }\n\n  private removeDomElement() {\n    const canvas = document.querySelector('canvas')\n    if (canvas) document.getElementById('experience')?.removeChild(canvas)\n  }\n\n  private setInstance() {\n    this.instance = new THREE.WebGLRenderer({ antialias: true })\n    this.instance.setSize(\n      this.experience.config.width,\n      this.experience.config.height\n    )\n    this.instance.setPixelRatio(this.experience.config.pixelRatio)\n  }\n\n  public resize() {\n    this.instance.setSize(\n      this.experience.config.width,\n      this.experience.config.height\n    )\n    this.instance.setPixelRatio(this.experience.config.pixelRatio)\n  }\n\n  public update() {\n    this.instance.render(this.experience.scene, this.experience.camera.instance)\n  }\n}\n","export default __webpack_public_path__ + \"static/media/faceMeshTemplate.7c10f762.png\";","import * as THREE from 'three'\n\nexport default class Lights {\n  public directionalLight!: THREE.DirectionalLight\n  public ambientLight!: THREE.AmbientLight\n\n  constructor() {\n    this.setLights()\n  }\n\n  private setLights() {\n    this.directionalLight = new THREE.DirectionalLight('white', 0.8)\n    this.directionalLight.position.set(0, 5, 0)\n    this.directionalLight.lookAt(0, 0, 0)\n\n    this.ambientLight = new THREE.AmbientLight('white', 0.4)\n  }\n}\n","import * as THREE from 'three'\nimport * as ZapparThree from '@zappar/zappar-threejs'\n\nimport Experience from '..'\n\nimport faceTextureTemplate from '../../assets/faceMeshTemplate.png'\nimport Lights from './lights'\n\nexport default class Face {\n  private experience: Experience\n  private lights!: Lights\n\n  private faceMaterial!: THREE.MeshStandardMaterial\n  private faceBufferGeometry!: ZapparThree.FaceBufferGeometry\n\n  public faceTrackerGroup!: ZapparThree.FaceAnchorGroup\n  public faceMeshMesh!: THREE.Mesh\n\n  constructor() {\n    this.experience = new Experience()\n\n    this.setLights()\n    this.setFace()\n    this.setVisibility()\n  }\n\n  private setLights() {\n    this.lights = new Lights()\n\n    this.experience.scene.add(\n      this.lights.directionalLight,\n      this.lights.ambientLight\n    )\n  }\n\n  private setVisibility() {\n    this.faceTrackerGroup.faceTracker.onVisible.bind(() => {\n      this.faceTrackerGroup.visible = true\n    })\n\n    this.faceTrackerGroup.faceTracker.onNotVisible.bind(() => {\n      this.faceTrackerGroup.visible = false\n    })\n  }\n\n  private setFace() {\n    const manager = new ZapparThree.LoadingManager()\n\n    // Tracker\n    const faceTracker = new ZapparThree.FaceTrackerLoader(manager).load()\n\n    // Tracker group\n    this.faceTrackerGroup = new ZapparThree.FaceAnchorGroup(\n      this.experience.camera.instance,\n      faceTracker\n    )\n    this.experience.scene.add(this.faceTrackerGroup)\n\n    // Face Mesh\n    const faceMesh = new ZapparThree.FaceMeshLoader(manager).load()\n    this.faceBufferGeometry = new ZapparThree.FaceBufferGeometry(faceMesh)\n\n    // Texture\n    const textureLoader = new THREE.TextureLoader(manager)\n    const faceTexture = textureLoader.load(faceTextureTemplate)\n    faceTexture.flipY = true\n\n    this.faceMaterial = new THREE.MeshStandardMaterial({\n      map: faceTexture,\n      transparent: true,\n    })\n\n    // Construct a THREE Mesh object from our geometry and texture\n    // and add it to our tracker group\n    this.faceMeshMesh = new THREE.Mesh(\n      this.faceBufferGeometry,\n      this.faceMaterial\n    )\n\n    this.faceTrackerGroup.add(this.faceMeshMesh)\n  }\n\n  public update() {\n    if (this.faceBufferGeometry) {\n      this.faceBufferGeometry.updateFromFaceAnchorGroup(this.faceTrackerGroup)\n    }\n  }\n\n  public destroy() {\n    const shouldDispose =\n      !!this.faceMaterial &&\n      !!this.faceBufferGeometry &&\n      !!this.lights &&\n      !!this.experience.scene\n\n    if (shouldDispose) {\n      this.faceMaterial.dispose()\n      this.faceBufferGeometry.dispose()\n\n      this.faceTrackerGroup.remove(this.faceMeshMesh)\n\n      this.experience.scene.remove(\n        this.lights.directionalLight,\n        this.lights.ambientLight\n      )\n    }\n  }\n}\n","import Face from './Face'\n\nexport default class World {\n  private face!: Face\n\n  constructor() {\n    this.setFace()\n  }\n\n  setFace() {\n    this.face = new Face()\n  }\n\n  resize() {}\n\n  update() {\n    this.face.update()\n  }\n\n  destroy() {\n    // const parent = document.getElementById('experience')\n    // const child = document.querySelector('canvas')\n    // parent && child && parent.removeChild(child)\n    this.face.destroy()\n  }\n}\n","import * as ZapparThree from '@zappar/zappar-threejs'\nimport * as THREE from 'three'\n\nimport Camera from './camera'\nimport Renderer from './renderer'\nimport World from './world'\n\ntype Options = {\n  targetElement: HTMLDivElement | null | undefined\n}\n\ntype Configuration = {\n  pixelRatio: number\n  width: number\n  height: number\n}\n\nclass Experience {\n  static instance: Experience\n\n  private isRunning = false\n\n  public targetElement!: HTMLDivElement | null | undefined\n  public config!: Configuration\n  public scene!: THREE.Scene\n  public renderer!: Renderer\n  public camera!: Camera\n  public world!: World\n\n  constructor(options?: Options) {\n    // :: AR compatibility check ::.\n    if (ZapparThree.browserIncompatible()) {\n      ZapparThree.browserIncompatibleUI()\n      throw new Error('Unsupported browser')\n    }\n\n    // :: Singleton pattern ::\n    if (Experience.instance) {\n      return Experience.instance\n    }\n    Experience.instance = this\n\n    // :: DOM ::\n    this.targetElement = options?.targetElement\n\n    if (!this.targetElement) {\n      console.warn(\"Missing 'targetElement' property\")\n      return\n    }\n\n    // :: Intialising experience ::\n    this.setScene()\n    this.setCamera()\n    this.setConfig()\n    this.setRenderer()\n    this.setWorld()\n    this.setResize()\n\n    this.isRunning = true\n\n    console.log('Starting experience...')\n    this.update()\n  }\n\n  private setWorld() {\n    this.world = new World()\n  }\n\n  private setCamera() {\n    this.camera = new Camera()\n    this.camera.instance.start(true)\n    this.scene.background = this.camera.instance.backgroundTexture\n  }\n\n  private setConfig() {\n    this.config = {\n      pixelRatio: 0,\n      width: 0,\n      height: 0,\n    }\n\n    // Pixel ratio\n    this.config.pixelRatio = Math.min(Math.max(window.devicePixelRatio, 1), 2)\n\n    // Width and height\n    const boundings = this.targetElement?.getBoundingClientRect()\n    this.config.width = boundings?.width || window.innerWidth\n    this.config.height = boundings?.height || window.innerHeight\n  }\n\n  private setScene() {\n    this.scene = new THREE.Scene()\n  }\n\n  private setResize() {\n    window.addEventListener('resize', () => {\n      const boundings = this.targetElement?.getBoundingClientRect()\n      this.config.width = boundings?.width || window.innerWidth\n      this.config.height = boundings?.height || window.innerHeight\n\n      this.world.resize()\n      this.renderer.resize()\n    })\n  }\n\n  private setRenderer() {\n    this.renderer = new Renderer()\n    this.targetElement?.appendChild(this.renderer.instance.domElement)\n    ZapparThree.glContextSet(this.renderer.instance.getContext())\n  }\n\n  private update() {\n    if (this.isRunning) {\n      this.camera?.update()\n      this.world?.update()\n      this.renderer?.update()\n\n      requestAnimationFrame(this.update.bind(this))\n    }\n  }\n\n  public destroy() {\n    this.stop()\n    this.world?.destroy()\n  }\n\n  public stop() {\n    this.isRunning = false\n  }\n}\n\nexport default Experience\n","import styled from 'styled-components'\n\nexport const Container = styled.div`\n  display: block;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n`\n","import { useRef, useEffect } from 'react'\n\nimport Experience from '../../experience'\n\nimport { Container } from './styles'\n\nconst Scene = () => {\n  const targetRef = useRef<HTMLDivElement>(null)\n  let experience = useRef<Experience>()\n\n  useEffect(() => {\n    experience.current = new Experience({\n      targetElement: targetRef.current,\n    })\n\n    return () => experience.current?.stop()\n  }, [targetRef])\n\n  return <Container id=\"experience\" ref={targetRef}></Container>\n}\n\nexport default Scene\n","import styled from 'styled-components'\n\nimport { Color } from '../../config/styles/colors'\nimport { ButtonProps } from '../../config/types'\n\nconst Button = styled.button<ButtonProps>`\n  /* Adapt the colors based on primary prop */\n  background: ${(props) => (props.primary ? Color.PRIMARY : 'transparent')};\n  color: ${(props) => (props.primary ? '#fff' : Color.PRIMARY)};\n\n  cursor: pointer;\n\n  :hover {\n    background: ${(props) => (props.primary ? 'transparent' : Color.PRIMARY)};\n    color: ${(props) => (props.primary ? Color.PRIMARY : '#fff')};\n  }\n\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid ${Color.PRIMARY};\n  border-radius: 3px;\n`\n\nexport default Button\n","import * as ZapparThree from '@zappar/zappar-threejs'\n\nexport const ZapparPermissionRquest = async (\n  callback: (value: boolean) => void\n) => {\n  const granted = await ZapparThree.permissionRequest()\n  if (granted) return callback(true)\n  else ZapparThree.permissionDeniedUI()\n}\n","import { useState } from 'react'\n\nimport Scene from '../components/Scene'\nimport Button from '../components/Button'\n\nimport { ZapparPermissionRquest } from '../utils/zappar'\n\nconst App = () => {\n  const [granted, setGranted] = useState(false)\n\n  const handlePermission = () => ZapparPermissionRquest(setGranted)\n\n  if (granted) return <Scene />\n\n  return (\n    <div className=\"app\">\n      <Button onClick={handlePermission}>Allow Camera</Button>\n\n      <a\n        href=\"https://www.zappar.com/\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        className=\"link\"\n      >\n        Zappar: Augmented, Virtual & Mixed Reality Solution\n      </a>\n    </div>\n  )\n}\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport GlobalStyle from './config/styles'\n\nimport App from './app'\n\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}