{"version":3,"sources":["experience/camera.ts","experience/renderer.ts","assets/faceMeshTemplate.png","experience/Face/lights.ts","experience/Face/index.ts","experience/world.ts","experience/index.ts","components/Scene/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Camera","experience","instance","this","Experience","setInstance","ZapparThree","value","start","renderer","updateFrame","Renderer","THREE","antialias","setSize","config","width","height","setPixelRatio","pixelRatio","render","scene","camera","Lights","directionalLight","ambientLight","setLights","position","set","lookAt","Face","lights","faceMaterial","faceBufferGeometry","faceTrackerGroup","faceMeshMesh","setFace","setVisibility","add","faceTracker","onVisible","bind","visible","onNotVisible","manager","load","faceMesh","faceTexture","faceTextureTemplate","flipY","map","transparent","updateFromFaceAnchorGroup","dispose","remove","World","face","update","destroy","options","targetElement","world","Error","setScene","setCamera","setConfig","setRenderer","setWorld","setResize","console","warn","background","backgroundTexture","Math","min","max","window","devicePixelRatio","boundings","getBoundingClientRect","innerWidth","innerHeight","addEventListener","resize","appendChild","domElement","getContext","requestAnimationFrame","Scene","ref","useRef","useEffect","current","id","App","useState","granted","setGranted","className","onClick","then","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.281dd230.chunk.js","sourcesContent":["import * as ZapparThree from '@zappar/zappar-threejs'\n\nimport Experience from '.'\n\nexport default class Camera {\n  private experience: Experience\n\n  public instance!: ZapparThree.Camera\n\n  constructor() {\n    this.experience = new Experience()\n\n    this.setInstance()\n  }\n\n  private setInstance() {\n    this.instance = new ZapparThree.Camera()\n  }\n\n  public start(value = true) {\n    this.instance.start(value)\n  }\n\n  public update() {\n    if (this.experience.renderer) {\n      this.instance.updateFrame(this.experience.renderer.instance)\n    }\n  }\n}\n","import * as THREE from 'three'\n\nimport Experience from '.'\n\nexport default class Renderer {\n  private experience: Experience\n  public instance!: THREE.WebGLRenderer\n\n  constructor() {\n    this.experience = new Experience()\n    this.setInstance()\n  }\n\n  private setInstance() {\n    this.instance = new THREE.WebGLRenderer({ antialias: true })\n    this.instance.setSize(\n      this.experience.config.width,\n      this.experience.config.height\n    )\n    this.instance.setPixelRatio(this.experience.config.pixelRatio)\n  }\n\n  public resize() {\n    this.instance.setSize(\n      this.experience.config.width,\n      this.experience.config.height\n    )\n    this.instance.setPixelRatio(this.experience.config.pixelRatio)\n  }\n\n  public update() {\n    this.instance.render(this.experience.scene, this.experience.camera.instance)\n  }\n}\n","export default __webpack_public_path__ + \"static/media/faceMeshTemplate.6e15d49f.png\";","import * as THREE from 'three'\n\nexport default class Lights {\n  public directionalLight!: THREE.DirectionalLight\n  public ambientLight!: THREE.AmbientLight\n\n  constructor() {\n    this.setLights()\n  }\n\n  private setLights() {\n    this.directionalLight = new THREE.DirectionalLight('white', 0.8)\n    this.directionalLight.position.set(0, 5, 0)\n    this.directionalLight.lookAt(0, 0, 0)\n\n    this.ambientLight = new THREE.AmbientLight('white', 0.4)\n  }\n}\n","import * as THREE from 'three'\nimport * as ZapparThree from '@zappar/zappar-threejs'\n\nimport Experience from '..'\n\nimport faceTextureTemplate from '../../assets/faceMeshTemplate.png'\nimport Lights from './lights'\n\nexport default class Face {\n  private experience: Experience\n  private lights!: Lights\n\n  private faceMaterial!: THREE.MeshStandardMaterial\n  private faceBufferGeometry!: ZapparThree.FaceBufferGeometry\n\n  public faceTrackerGroup!: ZapparThree.FaceAnchorGroup\n  public faceMeshMesh!: THREE.Mesh\n\n  constructor() {\n    this.experience = new Experience()\n\n    this.setLights()\n    this.setFace()\n    this.setVisibility()\n  }\n\n  private setLights() {\n    this.lights = new Lights()\n\n    this.experience.scene.add(\n      this.lights.directionalLight,\n      this.lights.ambientLight\n    )\n  }\n\n  private setVisibility() {\n    this.faceTrackerGroup.faceTracker.onVisible.bind(() => {\n      this.faceTrackerGroup.visible = true\n    })\n\n    this.faceTrackerGroup.faceTracker.onNotVisible.bind(() => {\n      this.faceTrackerGroup.visible = false\n    })\n  }\n\n  private setFace() {\n    const manager = new ZapparThree.LoadingManager()\n\n    // Tracker\n    const faceTracker = new ZapparThree.FaceTrackerLoader(manager).load()\n\n    // Tracker group\n    this.faceTrackerGroup = new ZapparThree.FaceAnchorGroup(\n      this.experience.camera.instance,\n      faceTracker\n    )\n    this.experience.scene.add(this.faceTrackerGroup)\n\n    // Face Mesh\n    const faceMesh = new ZapparThree.FaceMeshLoader(manager).load()\n    this.faceBufferGeometry = new ZapparThree.FaceBufferGeometry(faceMesh)\n\n    // Texture\n    const textureLoader = new THREE.TextureLoader(manager)\n    const faceTexture = textureLoader.load(faceTextureTemplate)\n    faceTexture.flipY = true\n\n    this.faceMaterial = new THREE.MeshStandardMaterial({\n      map: faceTexture,\n      transparent: true,\n    })\n\n    // Construct a THREE Mesh object from our geometry and texture\n    // and add it to our tracker group\n    this.faceMeshMesh = new THREE.Mesh(\n      this.faceBufferGeometry,\n      this.faceMaterial\n    )\n\n    this.faceTrackerGroup.add(this.faceMeshMesh)\n  }\n\n  public update() {\n    if (this.faceBufferGeometry) {\n      this.faceBufferGeometry.updateFromFaceAnchorGroup(this.faceTrackerGroup)\n    }\n  }\n\n  public destroy() {\n    const shouldDispose =\n      !!this.faceMaterial &&\n      !!this.faceBufferGeometry &&\n      !!this.lights &&\n      !!this.experience.scene\n\n    if (shouldDispose) {\n      this.faceMaterial.dispose()\n      this.faceBufferGeometry.dispose()\n\n      this.faceTrackerGroup.remove(this.faceMeshMesh)\n\n      this.experience.scene.remove(\n        this.lights.directionalLight,\n        this.lights.ambientLight\n      )\n    }\n  }\n}\n","import Face from './Face'\n\nexport default class World {\n  private face!: Face\n\n  constructor() {\n    this.setFace()\n  }\n\n  setFace() {\n    this.face = new Face()\n  }\n\n  resize() {}\n\n  update() {\n    this.face.update()\n  }\n\n  destroy() {\n    this.face.destroy()\n  }\n}\n","import * as ZapparThree from '@zappar/zappar-threejs'\nimport * as THREE from 'three'\n\nimport Camera from './camera'\nimport Renderer from './renderer'\nimport World from './world'\n\ntype Options = {\n  targetElement: HTMLDivElement | null | undefined\n}\n\ntype Configuration = {\n  pixelRatio: number\n  width: number\n  height: number\n}\n\nclass Experience {\n  static instance: Experience\n\n  public targetElement!: HTMLDivElement | null | undefined\n  public config!: Configuration\n  public scene!: THREE.Scene\n  public renderer!: Renderer\n  public camera!: Camera\n  public world!: World\n\n  constructor(options?: Options) {\n    // AR compatibility check\n    if (ZapparThree.browserIncompatible()) {\n      ZapparThree.browserIncompatibleUI()\n      throw new Error('Unsupported browser')\n    }\n\n    // Singleton pattern\n    if (Experience.instance) {\n      return Experience.instance\n    }\n    Experience.instance = this\n\n    // DOM\n    this.targetElement = options?.targetElement\n\n    if (!this.targetElement) {\n      console.warn(\"Missing 'targetElement' property\")\n      return\n    }\n\n    // Intialising experience\n    this.setScene()\n    this.setCamera()\n    this.setConfig()\n    this.setRenderer()\n    this.setWorld()\n    this.setResize()\n\n    this.update()\n  }\n\n  private setWorld() {\n    this.world = new World()\n  }\n\n  private setCamera() {\n    this.camera = new Camera()\n    this.camera.instance.start(true)\n    this.scene.background = this.camera.instance.backgroundTexture\n  }\n\n  private setConfig() {\n    this.config = {\n      pixelRatio: 0,\n      width: 0,\n      height: 0,\n    }\n\n    // Pixel ratio\n    this.config.pixelRatio = Math.min(Math.max(window.devicePixelRatio, 1), 2)\n\n    // Width and height\n    const boundings = this.targetElement?.getBoundingClientRect()\n    this.config.width = boundings?.width || window.innerWidth\n    this.config.height = boundings?.height || window.innerHeight\n  }\n\n  private setScene() {\n    this.scene = new THREE.Scene()\n  }\n\n  private setResize() {\n    this.targetElement?.addEventListener('resize', () => {\n      const boundings = this.targetElement?.getBoundingClientRect()\n      this.config.width = boundings?.width || window.innerWidth\n      this.config.height = boundings?.height || window.innerHeight\n\n      // this.world.resize()\n      this.renderer.resize()\n    })\n  }\n\n  private setRenderer() {\n    this.renderer = new Renderer()\n    this.targetElement?.appendChild(this.renderer.instance.domElement)\n    ZapparThree.glContextSet(this.renderer.instance.getContext())\n  }\n\n  private update() {\n    if (this.camera) this.camera.update()\n    if (this.world) this.world.update()\n    if (this.renderer) this.renderer.update()\n\n    requestAnimationFrame(this.update.bind(this))\n  }\n\n  public destroy() {\n    if (this.world) this.world.destroy()\n  }\n}\n\nexport default Experience\n","import React, { useRef, useEffect } from 'react'\n\nimport Experience from '../../experience'\n\nconst Scene = () => {\n  const ref = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const experience = new Experience({ targetElement: ref.current })\n    return () => experience.destroy()\n  }, [ref])\n\n  return <div id=\"experience\" ref={ref}></div>\n}\n\nexport default Scene\n","import { useState } from 'react'\nimport * as ZapparThree from '@zappar/zappar-threejs'\n\nimport Scene from './components/Scene'\n\nconst App = () => {\n  const [granted, setGranted] = useState(false)\n\n  const handleZapparPermission = () => {\n    ZapparThree.permissionRequest().then((granted) => {\n      if (granted) setGranted(true)\n      else ZapparThree.permissionDeniedUI()\n    })\n  }\n\n  if (granted) return <Scene />\n\n  return (\n    <div className=\"splash-screen\">\n      <button onClick={() => handleZapparPermission()}>Allow Camera</button>\n    </div>\n  )\n}\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}