{"version":3,"sources":["config/styles/colors.ts","config/styles/index.ts","experience/Camera.ts","experience/Renderer.ts","assets/faceMeshTemplate.png","experience/Face/lights.ts","experience/Face/index.ts","experience/World.ts","experience/Utils/Config.ts","experience/index.ts","components/Scene/styles.ts","components/Scene/index.tsx","components/Button/index.tsx","utils/zappar.ts","app/index.tsx","reportWebVitals.ts","index.tsx"],"names":["Color","fullStyling","styled","Camera","experience","instance","this","Experience","setInstance","ZapparThree","value","start","renderer","updateFrame","Renderer","removeDomElement","canvas","document","querySelector","getElementById","removeChild","THREE","antialias","setSize","config","screen","width","height","setPixelRatio","pixelRatio","render","scene","camera","Lights","directionalLight","ambientLight","setLights","position","set","lookAt","Face","lights","faceMaterial","faceBufferGeometry","faceTrackerGroup","faceMeshMesh","setFace","setVisibility","add","faceTracker","onVisible","bind","visible","onNotVisible","manager","load","faceMesh","faceTexture","faceTextureTemplate","flipY","map","transparent","updateFromFaceAnchorGroup","dispose","remove","World","face","update","destroy","Config","model","controls","size","boundings","targetElement","getBoundingClientRect","window","innerWidth","innerHeight","Math","min","max","devicePixelRatio","enabled","options","isRunning","world","Error","setConfig","setScene","setCamera","setRenderer","setWorld","setResize","console","log","warn","background","backgroundTexture","addEventListener","resize","appendChild","domElement","getContext","requestAnimationFrame","stop","Container","div","Scene","targetRef","useRef","useEffect","current","id","ref","Button","button","props","primary","ZapparPermissionRquest","callback","a","App","useState","granted","setGranted","className","onClick","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.feafab4f.chunk.js","sourcesContent":["export const Color = {\n  PRIMARY: '#61dafb',\n  SECONDARY: '#20232a',\n}\n","import * as styled from 'styled-components'\nimport { Color } from './colors'\n\nconst fullStyling = styled.css`\n  width: 100%;\n  height: 100%;\n`\n\nexport default styled.createGlobalStyle`\n  html,\n  body,\n  #root {\n    margin: 0;\n    padding: 0;\n\n    ${fullStyling};\n\n    font-family: Arial, Helvetica, Arial, sans-serif;\n  }\n\n  .app {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n\n    ${fullStyling};\n  }\n\n  .link {\n    font-size: bold;\n    color: ${Color.SECONDARY};\n\n    :hover {\n      color: #000;\n    }\n  }\n`\n","import * as ZapparThree from '@zappar/zappar-threejs'\n\nimport Experience from '.'\n\nexport default class Camera {\n  private experience: Experience\n\n  public instance!: ZapparThree.Camera\n\n  constructor() {\n    this.experience = new Experience()\n\n    this.setInstance()\n  }\n\n  private setInstance() {\n    this.instance = new ZapparThree.Camera()\n  }\n\n  public start(value = true) {\n    this.instance.start(value)\n  }\n\n  public update() {\n    if (this.experience.renderer) {\n      this.instance.updateFrame(this.experience.renderer.instance)\n    }\n  }\n}\n","import * as THREE from 'three'\n\nimport Experience from '.'\n\nexport default class Renderer {\n  private experience: Experience\n  public instance!: THREE.WebGLRenderer\n\n  constructor() {\n    this.experience = new Experience()\n\n    this.removeDomElement()\n    this.setInstance()\n  }\n\n  private removeDomElement() {\n    const canvas = document.querySelector('canvas')\n    if (canvas) document.getElementById('experience')?.removeChild(canvas)\n  }\n\n  private setInstance() {\n    this.instance = new THREE.WebGLRenderer({ antialias: true })\n    this.instance.setSize(\n      this.experience.config.screen.width,\n      this.experience.config.screen.height\n    )\n    this.instance.setPixelRatio(this.experience.config.screen.pixelRatio)\n  }\n\n  public resize() {\n    this.instance.setSize(\n      this.experience.config.screen.width,\n      this.experience.config.screen.height\n    )\n    this.instance.setPixelRatio(this.experience.config.screen.pixelRatio)\n  }\n\n  public update() {\n    this.instance.render(this.experience.scene, this.experience.camera.instance)\n  }\n}\n","export default __webpack_public_path__ + \"static/media/faceMeshTemplate.7c10f762.png\";","import * as THREE from 'three'\n\nexport default class Lights {\n  public directionalLight!: THREE.DirectionalLight\n  public ambientLight!: THREE.AmbientLight\n\n  constructor() {\n    this.setLights()\n  }\n\n  private setLights() {\n    this.directionalLight = new THREE.DirectionalLight('white', 0.8)\n    this.directionalLight.position.set(0, 5, 0)\n    this.directionalLight.lookAt(0, 0, 0)\n\n    this.ambientLight = new THREE.AmbientLight('white', 0.4)\n  }\n}\n","import * as THREE from 'three'\nimport * as ZapparThree from '@zappar/zappar-threejs'\n\nimport Experience from '..'\n\nimport faceTextureTemplate from '../../assets/faceMeshTemplate.png'\nimport Lights from './lights'\n\nexport default class Face {\n  private experience: Experience\n  private lights!: Lights\n\n  private faceMaterial!: THREE.MeshStandardMaterial\n  private faceBufferGeometry!: ZapparThree.FaceBufferGeometry\n\n  public faceTrackerGroup!: ZapparThree.FaceAnchorGroup\n  public faceMeshMesh!: THREE.Mesh\n\n  constructor() {\n    this.experience = new Experience()\n\n    this.setLights()\n    this.setFace()\n    this.setVisibility()\n  }\n\n  private setLights() {\n    this.lights = new Lights()\n\n    this.experience.scene.add(\n      this.lights.directionalLight,\n      this.lights.ambientLight\n    )\n  }\n\n  private setVisibility() {\n    this.faceTrackerGroup.faceTracker.onVisible.bind(() => {\n      this.faceTrackerGroup.visible = true\n    })\n\n    this.faceTrackerGroup.faceTracker.onNotVisible.bind(() => {\n      this.faceTrackerGroup.visible = false\n    })\n  }\n\n  private setFace() {\n    const manager = new ZapparThree.LoadingManager()\n\n    // Tracker\n    const faceTracker = new ZapparThree.FaceTrackerLoader(manager).load()\n\n    // Tracker group\n    this.faceTrackerGroup = new ZapparThree.FaceAnchorGroup(\n      this.experience.camera.instance,\n      faceTracker\n    )\n    this.experience.scene.add(this.faceTrackerGroup)\n\n    // Face Mesh\n    const faceMesh = new ZapparThree.FaceMeshLoader(manager).load()\n    this.faceBufferGeometry = new ZapparThree.FaceBufferGeometry(faceMesh)\n\n    // Texture\n    const textureLoader = new THREE.TextureLoader(manager)\n    const faceTexture = textureLoader.load(faceTextureTemplate)\n    faceTexture.flipY = true\n\n    this.faceMaterial = new THREE.MeshStandardMaterial({\n      map: faceTexture,\n      transparent: true,\n    })\n\n    // Construct a THREE Mesh object from our geometry and texture\n    // and add it to our tracker group\n    this.faceMeshMesh = new THREE.Mesh(\n      this.faceBufferGeometry,\n      this.faceMaterial\n    )\n\n    this.faceTrackerGroup.add(this.faceMeshMesh)\n  }\n\n  public update() {\n    if (this.faceBufferGeometry) {\n      this.faceBufferGeometry.updateFromFaceAnchorGroup(this.faceTrackerGroup)\n    }\n  }\n\n  public destroy() {\n    const shouldDispose =\n      !!this.faceMaterial &&\n      !!this.faceBufferGeometry &&\n      !!this.lights &&\n      !!this.experience.scene\n\n    if (shouldDispose) {\n      this.faceMaterial.dispose()\n      this.faceBufferGeometry.dispose()\n\n      this.faceTrackerGroup.remove(this.faceMeshMesh)\n\n      this.experience.scene.remove(\n        this.lights.directionalLight,\n        this.lights.ambientLight\n      )\n    }\n  }\n}\n","import Face from './Face'\n\nexport default class World {\n  private face!: Face\n\n  constructor() {\n    this.setFace()\n  }\n\n  setFace() {\n    this.face = new Face()\n  }\n\n  resize() {}\n\n  update() {\n    this.face.update()\n  }\n\n  destroy() {\n    this.face.destroy()\n  }\n}\n","import Experience from '..'\n\nimport {\n  ExperienceConfigScreen,\n  ExperienceConfigModel,\n  ExperienceConfigControls,\n} from '../../config/types'\n\nexport default class Config {\n  static instance: Config\n\n  private experience!: Experience\n\n  public screen!: ExperienceConfigScreen\n  public model!: ExperienceConfigModel\n  public controls!: ExperienceConfigControls\n\n  constructor() {\n    if (Config.instance) {\n      return Config.instance\n    }\n    Config.instance = this\n\n    this.experience = new Experience()\n\n    this.model = {\n      size: 0.0125,\n    }\n\n    const targetElement = this.experience.targetElement\n    const boundings = targetElement.getBoundingClientRect()\n    const width = boundings.width || window.innerWidth\n    const height = boundings.height || window.innerHeight\n\n    this.screen = {\n      pixelRatio: Math.min(Math.max(window.devicePixelRatio, 1), 2),\n      width,\n      height,\n    }\n\n    this.controls = {\n      enabled: true,\n    }\n  }\n}\n","import * as ZapparThree from '@zappar/zappar-threejs'\nimport * as THREE from 'three'\n\nimport Camera from './Camera'\nimport Renderer from './Renderer'\nimport World from './World'\nimport Config from './Utils/Config'\n\nimport { ExperienceOptions } from '../config/types'\n\nclass Experience {\n  static instance: Experience\n\n  private isRunning = false\n\n  public targetElement!: HTMLDivElement\n  public config!: Config\n  public scene!: THREE.Scene\n  public renderer!: Renderer\n  public camera!: Camera\n  public world!: World\n\n  constructor(options?: ExperienceOptions) {\n    // :: AR compatibility check ::.\n    if (ZapparThree.browserIncompatible()) {\n      ZapparThree.browserIncompatibleUI()\n      throw new Error('Unsupported browser')\n    }\n\n    // :: Singleton pattern ::\n    if (Experience.instance) {\n      return Experience.instance\n    }\n    Experience.instance = this\n\n    if (!options?.targetElement) {\n      console.warn(\"Missing 'targetElement' property\")\n      return\n    }\n\n    // :: DOM ::\n    this.targetElement = options?.targetElement\n\n    // :: Intialising experience ::\n    this.setConfig()\n    this.setScene()\n    this.setCamera()\n    this.setRenderer()\n    this.setWorld()\n    this.setResize()\n\n    this.isRunning = true\n\n    console.log('Starting experience...')\n    this.update()\n  }\n\n  private setWorld() {\n    this.world = new World()\n  }\n\n  private setCamera() {\n    this.camera = new Camera()\n    this.camera.instance.start(true)\n    this.scene.background = this.camera.instance.backgroundTexture\n  }\n\n  private setConfig() {\n    this.config = new Config()\n  }\n\n  private setScene() {\n    this.scene = new THREE.Scene()\n  }\n\n  private setResize() {\n    window.addEventListener('resize', () => {\n      const boundings = this.targetElement.getBoundingClientRect()\n      this.config.screen.width = boundings.width || window.innerWidth\n      this.config.screen.height = boundings.height || window.innerHeight\n\n      this.world.resize()\n      this.renderer.resize()\n    })\n  }\n\n  private setRenderer() {\n    this.renderer = new Renderer()\n    this.targetElement.appendChild(this.renderer.instance.domElement)\n    ZapparThree.glContextSet(this.renderer.instance.getContext())\n  }\n\n  private update() {\n    if (this.isRunning) {\n      this.camera?.update()\n      this.world?.update()\n      this.renderer?.update()\n\n      requestAnimationFrame(this.update.bind(this))\n    }\n  }\n\n  public destroy() {\n    this.stop()\n    this.world?.destroy()\n  }\n\n  public stop() {\n    this.isRunning = false\n  }\n}\n\nexport default Experience\n","import styled from 'styled-components'\n\nexport const Container = styled.div`\n  display: block;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n`\n","import { useRef, useEffect } from 'react'\n\nimport Experience from '../../experience'\n\nimport { Container } from './styles'\n\nconst Scene = () => {\n  const targetRef = useRef<HTMLDivElement>(null)\n  let experience = useRef<Experience>()\n\n  useEffect(() => {\n    if (targetRef?.current) {\n      experience.current = new Experience({\n        targetElement: targetRef.current,\n      })\n    }\n\n    return () => experience.current?.stop()\n  }, [targetRef])\n\n  return <Container id=\"experience\" ref={targetRef}></Container>\n}\n\nexport default Scene\n","import styled from 'styled-components'\n\nimport { Color } from '../../config/styles/colors'\nimport { ButtonProps } from '../../config/types'\n\nconst Button = styled.button<ButtonProps>`\n  /* Adapt the colors based on primary prop */\n  background: ${(props) => (props.primary ? Color.PRIMARY : 'transparent')};\n  color: ${(props) => (props.primary ? '#fff' : Color.PRIMARY)};\n\n  cursor: pointer;\n\n  :hover {\n    background: ${(props) => (props.primary ? 'transparent' : Color.PRIMARY)};\n    color: ${(props) => (props.primary ? Color.PRIMARY : '#fff')};\n  }\n\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid ${Color.PRIMARY};\n  border-radius: 3px;\n`\n\nexport default Button\n","import * as ZapparThree from '@zappar/zappar-threejs'\n\nexport const ZapparPermissionRquest = async (\n  callback: (value: boolean) => void\n) => {\n  const granted = await ZapparThree.permissionRequest()\n  if (granted) return callback(true)\n  else ZapparThree.permissionDeniedUI()\n}\n","import { useState } from 'react'\n\nimport Scene from '../components/Scene'\nimport Button from '../components/Button'\n\nimport { ZapparPermissionRquest } from '../utils/zappar'\n\nconst App = () => {\n  const [granted, setGranted] = useState(false)\n\n  const handlePermission = () => ZapparPermissionRquest(setGranted)\n\n  if (granted) return <Scene />\n\n  return (\n    <div className=\"app\">\n      <Button onClick={handlePermission}>Allow Camera</Button>\n\n      <a\n        href=\"https://www.zappar.com/\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        className=\"link\"\n      >\n        Zappar: Augmented, Virtual & Mixed Reality Solution\n      </a>\n    </div>\n  )\n}\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport GlobalStyle from './config/styles'\n\nimport App from './app'\n\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}