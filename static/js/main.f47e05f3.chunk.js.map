{"version":3,"sources":["assets/faceMeshTemplate.png","experience/index.ts","components/Scene/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["_instance","camera","faceTrackerGroup","faceMeshMesh","faceMaterial","faceBufferGeometry","directionalLight","ambientLight","renderer","scene","targetElement","ZapparThree","Error","this","THREE","antialias","start","background","backgroundTexture","addEventListener","width","offsetWidth","window","innerWidth","height","offsetHeight","innerHeight","setSize","position","set","lookAt","add","manager","faceTracker","load","faceMesh","faceTexture","faceTextureTemplate","flipY","map","transparent","onVisible","bind","visible","onNotVisible","setPixelRatio","Math","min","devicePixelRatio","appendChild","domElement","getContext","updateFrame","updateFromFaceAnchorGroup","render","requestAnimationFrame","dispose","remove","setRenderer","setFace","setLight","setResize","Scene","ref","useRef","useEffect","Experience","init","current","id","App","useState","granted","setGranted","className","onClick","then","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f47e05f3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/faceMeshTemplate.6e15d49f.png\";","import * as ZapparThree from '@zappar/zappar-threejs'\nimport * as THREE from 'three'\n\nimport faceTextureTemplate from '../assets/faceMeshTemplate.png'\n\nclass Experience {\n  private camera!: ZapparThree.Camera\n\n  private faceTrackerGroup!: ZapparThree.FaceAnchorGroup\n  private faceMeshMesh!: THREE.Mesh\n  private faceMaterial!: THREE.MeshStandardMaterial\n  private faceBufferGeometry!: ZapparThree.FaceBufferGeometry\n\n  private directionalLight!: THREE.DirectionalLight\n  private ambientLight!: THREE.AmbientLight\n\n  private renderer!: THREE.WebGLRenderer\n  private scene!: THREE.Scene\n\n  private targetElement!: HTMLDivElement | null\n\n  constructor() {\n    if (ZapparThree.browserIncompatible()) {\n      ZapparThree.browserIncompatibleUI()\n      throw new Error('Unsupported browser')\n    }\n\n    this.renderer = new THREE.WebGLRenderer({ antialias: true })\n    this.scene = new THREE.Scene()\n    this.camera = new ZapparThree.Camera()\n    this.camera.start(true)\n    this.scene.background = this.camera.backgroundTexture\n  }\n\n  private setResize() {\n    this.targetElement?.addEventListener('resize', () => {\n      const width = this.targetElement?.offsetWidth || window.innerWidth\n      const height = this.targetElement?.offsetHeight || window.innerHeight\n\n      this.renderer.setSize(width, height)\n    })\n  }\n\n  private setLight() {\n    this.directionalLight = new THREE.DirectionalLight('white', 0.8)\n    this.directionalLight.position.set(0, 5, 0)\n    this.directionalLight.lookAt(0, 0, 0)\n\n    this.ambientLight = new THREE.AmbientLight('white', 0.4)\n\n    this.scene.add(this.directionalLight, this.ambientLight)\n  }\n\n  private setFace() {\n    const manager = new ZapparThree.LoadingManager()\n\n    // Tracker\n    const faceTracker = new ZapparThree.FaceTrackerLoader(manager).load()\n    // Tracker group\n    this.faceTrackerGroup = new ZapparThree.FaceAnchorGroup(\n      this.camera,\n      faceTracker\n    )\n    this.scene.add(this.faceTrackerGroup)\n\n    // Face Mesh\n    const faceMesh = new ZapparThree.FaceMeshLoader(manager).load()\n    this.faceBufferGeometry = new ZapparThree.FaceBufferGeometry(faceMesh)\n\n    const textureLoader = new THREE.TextureLoader(manager)\n    const faceTexture = textureLoader.load(faceTextureTemplate)\n    faceTexture.flipY = true\n\n    this.faceMaterial = new THREE.MeshStandardMaterial({\n      map: faceTexture,\n      transparent: true,\n    })\n\n    // Construct a THREE Mesh object from our geometry and texture, and add it to our tracker group\n    this.faceMeshMesh = new THREE.Mesh(\n      this.faceBufferGeometry,\n      this.faceMaterial\n    )\n\n    this.faceTrackerGroup.add(this.faceMeshMesh)\n\n    this.faceTrackerGroup.faceTracker.onVisible.bind(() => {\n      this.faceTrackerGroup.visible = true\n    })\n    this.faceTrackerGroup.faceTracker.onNotVisible.bind(() => {\n      this.faceTrackerGroup.visible = false\n    })\n  }\n\n  private setRenderer() {\n    this.renderer.setSize(window.innerWidth, window.innerHeight)\n    this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n    this.targetElement?.appendChild(this.renderer.domElement)\n\n    ZapparThree.glContextSet(this.renderer.getContext())\n  }\n\n  private render() {\n    this.camera.updateFrame(this.renderer)\n\n    this.faceBufferGeometry.updateFromFaceAnchorGroup(this.faceTrackerGroup)\n\n    this.renderer.render(this.scene, this.camera)\n\n    requestAnimationFrame(this.render.bind(this))\n  }\n\n  public dispose() {\n    const shouldDispose =\n      !!this.faceMaterial &&\n      !!this.faceBufferGeometry &&\n      !!this.scene &&\n      !!this.directionalLight &&\n      !!this.ambientLight\n\n    if (shouldDispose) {\n      this.faceMaterial.dispose()\n      this.faceBufferGeometry.dispose()\n\n      this.faceTrackerGroup.remove(this.faceMeshMesh)\n      this.scene.remove(this.directionalLight, this.ambientLight)\n    }\n  }\n\n  public init(targetElement: HTMLDivElement | null) {\n    if (!targetElement) throw new Error(\"Missing 'targetElement' property\")\n    this.targetElement = targetElement\n\n    this.setRenderer()\n    this.setFace()\n    this.setLight()\n    this.setResize()\n    this.render()\n  }\n}\n\nconst _instance = new Experience()\nexport default _instance\n","import { useRef, useEffect } from 'react'\n\nimport Experience from '../../experience'\n\nconst Scene = () => {\n  const ref = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    Experience.init(ref.current)\n    return () => Experience.dispose()\n  }, [ref])\n\n  return <div id=\"experience\" ref={ref}></div>\n}\n\nexport default Scene\n","import { useState } from 'react'\nimport * as ZapparThree from '@zappar/zappar-threejs'\n\nimport Scene from './components/Scene'\n\nconst App = () => {\n  const [granted, setGranted] = useState(false)\n\n  const handleZapparPermission = () => {\n    ZapparThree.permissionRequest().then((granted) => {\n      if (granted) setGranted(true)\n      else ZapparThree.permissionDeniedUI()\n    })\n  }\n\n  if (granted) return <Scene />\n\n  return (\n    <div className=\"splash-screen\">\n      <button onClick={() => handleZapparPermission()}>Allow Camera</button>\n    </div>\n  )\n}\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}